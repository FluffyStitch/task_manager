version: 2.1

orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2
  browser-tools: circleci/browser-tools@1.0.1

jobs:
  lintering:
    docker:
      - image: cimg/ruby:2.7.2-node
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - run:
          name: lefthook
          command: bundle exec lefthook run pre-commit
#   build:
#     docker:
#       - image: cimg/ruby:2.7.2-browsers
#     steps:
#       - checkout
#       - ruby/install-deps
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"

#   test:
#     docker:
#       - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#       - image: circleci/postgres:9.5-alpine
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#         environment: # add POSTGRES environment variables.
#           POSTGRES_USER: circleci-demo-ruby
#           POSTGRES_DB: rails_blog_test
#           POSTGRES_PASSWORD: ""
#     # environment variables specific to Ruby/Rails, applied to the primary container.
#     environment:
#       BUNDLE_JOBS: "3"
#       BUNDLE_RETRY: "3"
#       PGHOST: 127.0.0.1
#       PGUSER: circleci-demo-ruby
#       PGPASSWORD: ""
#       RAILS_ENV: test
#     # A series of steps to run, some are similar to those in "build".
#     steps:
#       - checkout
#       - ruby/install-deps
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#       # Here we make sure that the secondary container boots
#       # up before we run operations on the database.
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Database setup
#           command: bundle exec rails db:schema:load --trace
#       # Run rspec in parallel
#       - ruby/rspec-test

# # We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  lint_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - lintering
